Index: src/CookieConsentBundle.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\ndeclare(strict_types=1);\n\nnamespace huppys\\CookieConsentBundle;\n\nuse Symfony\\Component\\Config\\Definition\\Configurator\\DefinitionConfigurator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass CookieConsentBundle extends AbstractBundle\n{\n    protected string $extensionAlias = 'cookie_consent';\n\n    public function configure(DefinitionConfigurator $definition): void\n    {\n        $definition->import('../config/definition/definition.php', type: 'php');\n    }\n\n    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void\n    {\n        // is this done in configure()?\n        // $config = $this->processConfiguration($configuration, $configs);\n\n        // load services.yaml config\n        $container->import('../config/services.yaml');\n\n        $services = $container->services();\n\n        $services->defaults()\n            ->autoconfigure()\n            ->autowire()\n            ->private();\n\n\n        $parameters = $container->parameters();\n        if (isset($config['cookie_settings'])) {\n            $services->defaults()->bind('$cookieSettings', $config['cookie_settings']);\n\n            $parameters->set($this->extensionAlias . '.cookie_settings', $config['cookie_settings']);\n\n            if (isset($config['cookie_settings']['name_prefix'])) {\n                $parameters->set($this->extensionAlias . '.name_prefix', $config['cookie_settings']['name_prefix']);\n            }\n\n            if (isset($config['cookie_settings']['cookies'])) {\n                $parameters->set($this->extensionAlias . '.cookies', $config['cookie_settings']['cookies']);\n            }\n        }\n\n        if (isset($config['consent_categories'])) {\n            $parameters->set($this->extensionAlias . '.consent_categories', $config['consent_categories']);\n        }\n\n        if (isset($config['persist_consent'])) {\n            $services->defaults()->bind('$persistConsent', $config['persist_consent']);\n\n            $parameters->set($this->extensionAlias . '.persist_consent', $config['persist_consent']);\n        }\n\n        if (isset($config['position'])) {\n            $services->defaults()->bind('$cookieConsentPosition', $config['position']);\n\n            $parameters->set($this->extensionAlias . '.position', $config['position']);\n        }\n\n        if (isset($config['form_action'])) {\n            $services->defaults()->bind('$formAction', $config['form_action']);\n\n            $parameters->set($this->extensionAlias . '.form_action', $config['form_action']);\n        }\n\n        if (isset($config['read_more_route'])) {\n            $services->defaults()->bind('$readMoreRoute', $config['read_more_route']);\n\n            $parameters->set($this->extensionAlias . '.read_more_route', $config['read_more_route']);\n        }\n\n        if (isset($config['csrf_protection'])) {\n            $parameters->set($this->extensionAlias . '.csrf_protection', $config['csrf_protection']);\n        }\n\n        //        Register pre-compile classes here?\n        //        $this->addAnnotatedClassesToCompile([\n        //            // you can define the fully qualified class names...\n        //            'Acme\\\\BlogBundle\\\\Controller\\\\AuthorController',\n        //            // ... but glob patterns are also supported:\n        //            'Acme\\\\BlogBundle\\\\Form\\\\**',\n        //\n        //            // ...\n        //        ]);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CookieConsentBundle.php b/src/CookieConsentBundle.php
--- a/src/CookieConsentBundle.php	(revision 0da58873781d7ec9cb78af0a1c245d806685a492)
+++ b/src/CookieConsentBundle.php	(date 1718829552834)
@@ -4,10 +4,13 @@
 
 namespace huppys\CookieConsentBundle;
 
+use huppys\CookieConsentBundle\Controller\CookieConsentController;
+use huppys\CookieConsentBundle\Cookie\CookieSettings;
 use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
 use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
 use Symfony\Component\HttpKernel\Bundle\AbstractBundle;
+use function Symfony\Component\DependencyInjection\Loader\Configurator\service;
 
 class CookieConsentBundle extends AbstractBundle
 {
@@ -33,52 +36,31 @@
             ->autowire()
             ->private();
 
+        $services->set(CookieConsentController::class)
+            ->args([service('twig.environment')]);
 
-        $parameters = $container->parameters();
         if (isset($config['cookie_settings'])) {
-            $services->defaults()->bind('$cookieSettings', $config['cookie_settings']);
-
-            $parameters->set($this->extensionAlias . '.cookie_settings', $config['cookie_settings']);
-
-            if (isset($config['cookie_settings']['name_prefix'])) {
-                $parameters->set($this->extensionAlias . '.name_prefix', $config['cookie_settings']['name_prefix']);
-            }
-
-            if (isset($config['cookie_settings']['cookies'])) {
-                $parameters->set($this->extensionAlias . '.cookies', $config['cookie_settings']['cookies']);
-            }
-        }
-
-        if (isset($config['consent_categories'])) {
-            $parameters->set($this->extensionAlias . '.consent_categories', $config['consent_categories']);
+            $services->defaults()->bind(CookieSettings::class . '$cookieSettings', $config['cookie_settings']);
         }
 
         if (isset($config['persist_consent'])) {
-            $services->defaults()->bind('$persistConsent', $config['persist_consent']);
-
-            $parameters->set($this->extensionAlias . '.persist_consent', $config['persist_consent']);
+            $services->defaults()->bind('bool $persistConsent', $config['persist_consent']);
         }
 
         if (isset($config['position'])) {
-            $services->defaults()->bind('$cookieConsentPosition', $config['position']);
-
-            $parameters->set($this->extensionAlias . '.position', $config['position']);
+            $services->defaults()->bind('string $cookieConsentPosition', $config['position']);
         }
 
         if (isset($config['form_action'])) {
-            $services->defaults()->bind('$formAction', $config['form_action']);
-
-            $parameters->set($this->extensionAlias . '.form_action', $config['form_action']);
+            $services->defaults()->bind('string $formAction', $config['form_action']);
         }
 
         if (isset($config['read_more_route'])) {
-            $services->defaults()->bind('$readMoreRoute', $config['read_more_route']);
-
-            $parameters->set($this->extensionAlias . '.read_more_route', $config['read_more_route']);
+            $services->defaults()->bind('string|null $readMoreRoute', $config['read_more_route']);
         }
 
         if (isset($config['csrf_protection'])) {
-            $parameters->set($this->extensionAlias . '.csrf_protection', $config['csrf_protection']);
+            $services->defaults()->bind('bool $csrfProtection', $config['csrf_protection']);
         }
 
         //        Register pre-compile classes here?
